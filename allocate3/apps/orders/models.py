from django.db import models
from core import base
from collections import defaultdict
# from .managers import ManifestManager


class Manifest(base.SlugUniqueMixin, models.Model):
    '''
    Contains the base manifest file - every standard drop-ship order
    placed through allocate is a manifest
    '''
    STATUS_CHOICES = (
        (-1, 'CSV Not Loaded'),
        (0, 'Created'),
        (1, 'Supplier Bidding'),
        (2, 'Allocating Multi-Item Orders'),
        (3, 'Allocating Single Item Orders'),
        (4, 'Confirming Allocations'),
        (5, 'Final Confirmation'),
        (6, 'Order Confirmed'),
    )

    name = models.CharField(max_length=300, db_index=True)
    # slug is used in urls instead of pk to ensure we maintain privacy
    date_created = models.DateTimeField(auto_now_add=True)
    user = models.CharField('Created by user', max_length=300, default='root')
    status = models.IntegerField(default=0, choices=STATUS_CHOICES)
    company = models.ForeignKey('core.Company')
    csv_upload = models.FileField(
        'Manifest CSV File', upload_to='orders/manifest',
        blank=True, null=True,
        # need to allow this as sometimes manifests get created for fun
    )
    lock_task = models.CharField(max_length=200, blank=True, null=True)
    rollover_from_previous = models.BooleanField(
        'Rollover unordered items from previous manifests',
        default=True,
    )
    allowed_suppliers = models.ManyToManyField('suppliers.Supplier', null=True, blank=True)
    # objects = ManifestManager()

    @property
    def all_products(self):
        return models.get_model('products', 'Product').objects.filter(
            invoiceline__invoice__manifest=self)

    @property
    def active_products(self):
        return self.all_products.filter(invoiceline__active=True)

    def build_quotes(self):
        quote_data = []
        for supplier in self.allowed_suppliers.all():
            currency = supplier.get_base_currency()
            for product in self.active_products:
                quote_data.append({
                    'product': product,
                    'supplier': supplier,
                    'manifest': self,
                    'currency': currency
                })
        self.quotes.model.objects.bulk_create(quote_data)

class Invoice(base.SlugUniqueMixin, base.AddressMixin, models.Model):
    '''
    Contains the base details of each customer's order - delivery details etc.
    Does not contain any product information.
    '''
    manifest = models.ForeignKey('Manifest')
    order_number = models.CharField(max_length=300, db_index=True,
        help_text='Order number as generated by order management system')
    name = models.CharField(max_length=300, db_index=True, null=True, blank=True)
    comment = models.CharField('Special Delivery Instructions',
        max_length=300, null=True, blank=True)
    email = models.EmailField('Customer Email Address',
        null=True, blank=True)
    internal_reference = models.CharField(
        max_length=50, blank=True, null=True, db_index=True,
        help_text='Used for grouping orders for direct-to-customer emails'
    )
    reissue = models.ForeignKey('self', null=True, blank=True, related_name='reissues')
    date_imported = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    priority = models.IntegerField(default=0)

    # objects = InvoiceManager()

    def __unicode__(self):
        return self.order_number

    class Meta:
        permissions = (
            ('view_invoice', 'Can view invoices'),
            ('view_internal', 'Can see email and internal reference info'),
        )
        ordering = ['order_number']


class InvoiceLine(models.Model):
    '''
    Details the 'cart items' within each order - contains product and quantity information
    '''
    invoice = models.ForeignKey('Invoice', related_name='lines')
    product = models.ForeignKey('products.Product')
    quantity = models.IntegerField(default=0)
    # buy_currency = models.ForeignKey('payments.Currency', null=True, blank=True,
    #     related_name='invoiceline_buy')
    # sell_currency = models.ForeignKey('payments.Currency', null=True, blank=True,
    #     related_name='invoiceline_sell')
    declared_value = models.DecimalField(max_digits=20, decimal_places=2, default=0.00,
        help_text='Declared product value to appear on the invoice for customs purposes')
    actual_value = models.DecimalField(max_digits=20, decimal_places=2, default=0.00,
        help_text='Actual product value for reporting purposes')
    delivery_revenue = models.DecimalField(max_digits=20, decimal_places=2, default=0.00,
        help_text='Actual delivery revenue for reporting purposes')
    supplier = models.ForeignKey('suppliers.Supplier', null=True, blank=True, default=None)
    ordered_at = models.DateTimeField(null=True, blank=True, default=None)
    active = models.BooleanField(default=True)
    progress_sent = models.BooleanField(default=False)
    item_price = base.PriceField()
    delivery_price = base.PriceField()
    remote_delivery_price = base.PriceField()
    prepaid_inventory = models.ForeignKey('products.Inventory', null=True, blank=True)
    delayed = models.BooleanField(default=False)

    # def clean(self):
    #     if not self.sell_currency_id:
    #         self.sell_currency = self.invoice.manifest.company.default_sell_currency

    def save(self, *args, **kwargs):
        self.clean()
        super(InvoiceLine, self).save(*args, **kwargs)

    class Meta:
        ordering = ('invoice', 'product')
        permissions = (
            ('view_revenue', 'Can view actual revenue information'),
            ('view_pricing', 'Can see purchase price info'),
        )
        get_latest_by = 'pk'

class Quote(models.Model):
    '''
    Where suppliers will enter available quantities of items - this is a 3xfk model
    which has unique combos for manifest, supplier and product
    '''
    product = models.ForeignKey('products.Product', related_name='quotes')
    supplier = models.ForeignKey('suppliers.Supplier', related_name='quotes')
    manifest = models.ForeignKey('Manifest', related_name='quotes')
    quantity = models.IntegerField('Quantity Available', default=0)
    comment = models.CharField(max_length=200, null=True, blank=True)
    price = base.PriceField()
    # currency = models.ForeignKey('payments.Currency',
    #     related_name='+', null=True, blank=True)

    class Meta:
        ordering = ('product', 'supplier')
        unique_together = (
            ('product', 'supplier', 'manifest')
        )
